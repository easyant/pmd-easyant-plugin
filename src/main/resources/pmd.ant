<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<project name="org.apache.easyant.plugins;pmd" 
        xmlns:ivy="antlib:org.apache.ivy.ant" 
        xmlns:ea="antlib:org.apache.easyant">
        
    <ea:core-version requiredrevision="[0.9,+]" />
    
    <target name="pmd:init">
        <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="org.apache.easyant.plugins#pmd.classpath"/>
        <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="org.apache.easyant.plugins#pmd.classpath"/>
        <ea:parameter property="target.reports" default="${target}/reports" description="base directory for reports" />
        <ea:parameter property="pmd.encoding" default="UTF-8" description="The character set encoding (e.g. UTF-8) to use when reading the source code files"/>

        <ea:parameter property="pmd.main.sources" default="${basedir}/src/main/java" description="directory where pmd rules will be checked"/>
        <ea:parameter property="pmd.main.sources.includes" default="**/*.java" description="Pattern describing files included in pmd checks"/>
        <ea:parameter property="pmd.main.sources.excludes" default="" description="Pattern describing files included in pmd checks"/>


        <fileset id="pmd.fileset" dir="${pmd.main.sources}" includes="${pmd.main.sources.includes}" excludes="${pmd.main.sources.excludes}" />
    </target>


    <target name="pmd:cpd" depends="pmd:init" description="generates a report for PMD's Copy/Paste Detector (CPD) tool">
        <ea:parameter property="pmd.format" default="text" description="The format of the report (e.g. csv, text, xml); defaults to text."/>
        <ea:parameter property="pmd.ignore.literals" default="false" description="if true, CPD ignores literal value differences when evaluating a duplicate block. This means that foo=42; and foo=43; will be seen as equivalent. You may want to run PMD with this option off to start with and then switch it on to see what it turns up; defaults to false."/>
        <ea:parameter property="pmd.ignore.identifiers" default="false" description="Similar to ignoreLiterals but for identifiers; i.e., variable names, methods names, and so forth; defaults to false."/>
        <ea:parameter property="pmd.ignore.annotations" default="false" description="Ignore annotations. More and more modern frameworks use annotations on classes and methods, which can be very redundant and trigger CPD matches. With J2EE (CDI, Transaction Handling, etc) and Spring (everything) annotations become very redundant. Often classes or methods have the same 5-6 lines of annotations. This causes false positives."/>
        <ea:parameter property="pmd.language" default="java" description="Flag to select the appropriate language (e.g. cpp, cs, java, php, ruby, and ecmascript); defaults to java."/>
        <ea:parameter property="pmd.minimum.token.count" default="100" description="A positive integer indicating the minimum duplicate size."/>
        <ea:parameter property="pmd.cpd.report.outputfile" default="${target.reports}/cpd.${pmd.format}" description="The destination file for the report. If not specified the console will be used instead."/>

        
        <mkdir dir="${target.reports}"/>  
        <cpd encoding="${pmd.encoding}" minimumTokenCount="${pmd.minimum.token.count}" format="${pmd.format}" ignoreLiterals="${pmd.ignore.literals}" ignoreIdentifiers="${pmd.ignore.identifiers}" ignoreAnnotations="${pmd.ignore.annotations}" language="${pmd.language}" outputfile="${pmd.cpd.report.outputfile}">
             <fileset refid="pmd.fileset"/>
        </cpd>
    </target>


    <target name="pmd:pmd" depends="pmd:init" description="creates a PMD report based on the rulesets and configuration set in the plugin">
        <ea:parameter property="pmd.rulesetfiles" default="rulesets/java/basic.xml,rulesets/java/imports.xml,java-unusedcode" description="A comma delimited list of ruleset files ('rulesets/basic.xml,rulesets/design.xml'). If you write your own ruleset files, you can put them on the classpath and plug them in here."/>
        <ea:parameter property="pmd.failonerror" default="true" description="Whether or not to fail the build if any errors occur while processing the files"/>
        <ea:parameter property="pmd.failonruleviolation" default="true" description="Whether or not to fail the build if PMD finds any problems"/>
        <ea:parameter property="pmd.minimum.priority" default="5" description="The rule priority threshold; rules with lower priority than they will not be used"/>
        <ea:parameter property="pmd.max.rule.violations" default="0" description="Whether or not to fail the build if PMD finds more than the value of this attribute. Note that setting this attribute does not require to set the failOnRuleViolation to true."/>
        <ea:parameter property="pmd.report.outputfile" default="${target.reports}/pmd.xml"/>
        <mkdir dir="${target.reports}"/>  
        <pmd encoding="${pmd.encoding}" rulesetfiles="${pmd.rulesetfiles}" failonerror="${pmd.failonerror}" failonruleviolation="${pmd.failonruleviolation}" minimumPriority="${pmd.minimum.priority}" maxruleviolations="${pmd.max.rule.violations}">
             <formatter type="xml" toFile="${pmd.report.outputfile}"/>
             <fileset refid="pmd.fileset"/>
        </pmd>
    </target>
    
</project>
